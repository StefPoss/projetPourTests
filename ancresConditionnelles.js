
let str1 = "Hello World";
let str2 = "End of the story";
let str3 = "Start a new chapter";
let str4 = "inside";
let str5 = "999 is the end";

let strings = ["Hello World", "End of the story", "Start a new chapter", "inside", "999 is the end"];

// ğŸ‘‰ Utilisez l'ancre de dÃ©but de chaÃ®ne pour trouver une correspondance pour "Hello" uniquement s'il apparaÃ®t au dÃ©but de la chaÃ®ne.

const patttern1 = /^Hello/;
console.log(patttern1.test(str1));
// Attendu : true

// ğŸ‘‰ Utilisez l'ancre de fin de chaÃ®ne pour vÃ©rifier si "end" est Ã  la fin de n'importe quelle chaÃ®ne.
const pattern2 = /end$/;
function checkEnd(str){
    console.log(str);
    return pattern2.test(str);
}
console.log(checkEnd(strings));
// Attendu : true

// ğŸ‘‰ Ã‰crivez une expression rÃ©guliÃ¨re utilisant l'ancre de limite de mot pour trouver "Start" uniquement lorsqu'il s'agit d'un mot entier au dÃ©but d'une chaÃ®ne.
const pattern3 =/^\bstart\b/i;
console.log(pattern3.test(str3));

// ğŸ‘‰ Utilisez une non-limite de mot pour trouver "inside" lorsqu'il n'est pas utilisÃ© comme un mot isolÃ©, par exemple dans "inside" mais pas comme partie d'un autre mot.
const pattern4 = /\Binside\B/;
console.log(`trouver inside dans ${str4} : ${pattern4.test(str4)}`);
// Attendu : true > mais je trouve false ???!!

// ğŸ‘‰ Combinez les ancres de dÃ©but et de fin pour identifier les chaÃ®nes qui commencent et finissent par un chiffre.
const pattern5 = /^\d*\d$/;
console.log(pattern5.test(str5));
// Attendu : false

// ğŸ‘‰ Utilisez les limites de mot pour trouver toutes les occurrences de "new" lorsqu'ils apparaissent comme des mots entiers dans une phrase.
const pattern6 = /\bnew\b/g;
console.log(str3.match(pattern6));
// Attendu : [ 'new' ]


let str6 = "hello hello how are you?";
let str7 = "bye bye see you soon";
let str8 = "happy to to meet you";
let str9 = "no repetition here";
let str10 = "what what is is this this";

// ğŸ‘‰ Ã‰crivez une expression rÃ©guliÃ¨re pour dÃ©tecter les mots rÃ©pÃ©tÃ©s immÃ©diatement l'un aprÃ¨s l'autre dans une phrase. Testez cela sur la phrase 1.
// Cherche une limite de mot (\b) avec plusieurs caractÃ¨res (\w+) qui se rÃ©pÃ¨tent 1 fois (\1) et qui se termine par une limite de mot (\b)
const pattern7 = /\b(\w+)\s\1\b/g;
console.log(str6.match(pattern7))
// attendu : [ 'hello hello' ]

// ğŸ‘‰ Modifiez l'expression rÃ©guliÃ¨re de la question 1 pour inclure les mots sÃ©parÃ©s par un seul espace et testez-la sur la phrase 5.
// Cherche une limite de mot (\b) avec plusieurs caractÃ¨res (\w+) sÃ©parÃ©s pas un espace (\s)  qui se rÃ©pÃ¨tent 1 fois (\1) et qui se termine par une limite de mot (\b)
const pattern8 = /\b(\w+)\s\1\b/g;
console.log(str10.match(pattern8))
// attendu : [ 'what what', 'is is', 'this this' ]


// ğŸ‘‰ Ã‰tendez votre expression rÃ©guliÃ¨re pour ignorer la casse (i.e., "Hello" suivi de "hello" devrait Ã©galement Ãªtre considÃ©rÃ© comme une rÃ©pÃ©tition). Testez cette expression sur une version modifiÃ©e de la phrase 1 oÃ¹ le second "hello" est en majuscule.
const pattern9 = /\b(\w+)\s\1\b/ig;
console.log(str10.match(pattern9))
// attendu : [ 'what what', 'is is', 'this this' ]

// ğŸ‘‰ Utilisez votre expression rÃ©guliÃ¨re pour remplacer tous les mots rÃ©pÃ©tÃ©s par un seul mot et retournez la chaÃ®ne corrigÃ©e pour la phrase 5.
function replaceDoublons(str) {
    const pattern10 = /\b(\w+)\s\1\b/ig;
    return str.replace(pattern10,);
}
const cleanDoublons = replaceDoublons(str10);
console.log(cleanDoublons);

// ğŸ‘‰ Ã‰crivez une expression rÃ©guliÃ¨re pour identifier les cas oÃ¹ un mot est rÃ©pÃ©tÃ© deux fois mais avec un ou plusieurs mots intermÃ©diaires. Par exemple, dÃ©tecter "to" dans la phrase 3.


// ğŸ‘‰ CrÃ©ez une fonction en JavaScript qui utilise votre expression rÃ©guliÃ¨re pour nettoyer une chaÃ®ne de tous les mots rÃ©pÃ©tÃ©s, qu'ils soient adjacents ou sÃ©parÃ©s par d'autres mots. Appliquez cette fonction Ã  toutes les phrases donnÃ©es.